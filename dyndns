#!/usr/bin/env python

import sys
import json
import argparse
import ipaddress
import shutil
import subprocess as sp

import requests as r

# some TODO:
# - monitor/read multiple interfaces
# - multiple addresses per interface
# - multiple providers/granular provider configuration
# - support IPv4

def eprint(*args, **kwargs):
    print(*args, **kwargs, file=sys.stderr)

class IonosDynDNS:
    def __init__(self, update_url):
        self._update_url = update_url
        self._current_addr = None

    def update(self, addr):
        if self._current_addr == addr:
            return
        eprint(f"[IonosDynDNS] update to {addr}")
        resp = r.get(self._update_url, params={"ipv6": addr.exploded})
        resp.raise_for_status()
        self._current_addr = addr

    @classmethod
    def add_subparser(cls, subparsers):
        subparser = subparsers.add_parser("ionos")
        subparser.add_argument("update_url", help="the update URL provided after creating a DynDNS bundle via the Ionos API")
        subparser.set_defaults(init_dyndns=lambda args: IonosDynDNS(args.update_url))

def run_ipv6(dev, dyn_dns):
    ip_cmd = shutil.which("ip")
    with sp.Popen((ip_cmd, "monitor", "dev", str(dev), "label", "address"), stdout=sp.PIPE, text=True) as monitor:
        def do_update():
            ifaces_info = json.loads(sp.check_output((ip_cmd, "-json", "addr", "show", "dev", str(dev))))
            addresses = (
                ipaddress.IPv6Address(addr["local"])
                for iface in ifaces_info
                for addr in iface["addr_info"]
                if addr["family"] == "inet6" and not addr.get("deprecated", False)
            )
            global_addresses = (addr for addr in addresses if addr.is_global)
            global_address = next(global_addresses, None)
            if global_address is not None:
                dyn_dns.update(global_address)

        do_update()
        for line in monitor.stdout:
            if not line.startswith("[ADDR]"):
                continue
            do_update()

def main(argv):
    parser = argparse.ArgumentParser(prog="dyndns")
    parser.add_argument("interface", help="interface to monitor")
    provider_subparsers = parser.add_subparsers(help="DynDNS provider", required=True)

    IonosDynDNS.add_subparser(provider_subparsers)

    args = parser.parse_args(argv[1:])
    dyndns = args.init_dyndns(args)

    eprint(f"[main] start monitoring {args.interface}")
    run_ipv6(args.interface, dyndns)

if __name__ == "__main__":
    main(sys.argv)
